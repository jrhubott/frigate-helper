name: "Build and Push Docker Image, Create Release with Issues and All Changes"

on:
  push:
    tags:
      - 'v*'   # Trigger on version tags (e.g., v1.0.0, v2.1.0)
    branches:
      - main   # Trigger on main branch pushes
      - dev    # Trigger on dev branch pushes
      - '*'     # Trigger on all other branch pushes

permissions:
  contents: write
  packages: write
  issues: read    # Allows reading issues for the release notes

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code with tags and full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history and tags to access tags and messages
      
      # Step 2: Extract version tag (on version tags) and commit SHA
      - name: Set version tag and commit SHA
        id: set_version_and_commit
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          else
            echo "VERSION_TAG=latest" >> $GITHUB_ENV
          fi
          # Extract short form of the commit SHA and save it for tagging
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Step 4: Build the Docker image only once, tagging it with the commit SHA
      - name: Build Docker image
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          docker build -t $DOCKER_IMAGE:${{ env.COMMIT_SHA }} .

      # Step 5: Push the Docker image with the commit SHA
      - name: Push Docker image with commit SHA
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          docker push $DOCKER_IMAGE:${{ env.COMMIT_SHA }}

      # Step 6: Tag and Push with Version, Git Hash for Others, and Latest for Important Branches
      - name: Tag and Push with Version and Git Hash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          # Check if it's a version tag
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # Tag with the version
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:${{ env.VERSION_TAG }}
            docker push $DOCKER_IMAGE:${{ env.VERSION_TAG }}

            # Tag with the major version
            MAJOR_VERSION=$(echo "${{ env.VERSION_TAG }}" | grep -oE '^v[0-9]+')
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:${MAJOR_VERSION}
            docker push $DOCKER_IMAGE:${MAJOR_VERSION}

            # Tag as latest
            docker tag $DOCKER_IMAGE:${{ env.VERSION_TAG }} $DOCKER_IMAGE:latest
            docker push $DOCKER_IMAGE:latest

          # Handle 'dev' and 'main' branches
          elif [[ "${GITHUB_REF}" == refs/heads/dev || "${GITHUB_REF}" == refs/heads/main ]]; then
            # Tag with 'dev' or 'main'
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:$(basename $GITHUB_REF)
            docker push $DOCKER_IMAGE:$(basename $GITHUB_REF)

            # Also tag as latest
            docker tag $DOCKER_IMAGE:$(basename $GITHUB_REF) $DOCKER_IMAGE:latest
            docker push $DOCKER_IMAGE:latest

          # For all other branches, tag only with commit SHA but do not push
          else
            echo "Building image for branch: $(basename $GITHUB_REF) - Tagging with commit SHA only"
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:${{ env.COMMIT_SHA }}
            echo "Image tagged with commit SHA for branch: $(basename $GITHUB_REF) but will not be pushed."
          fi

      # Step 7: Generate release notes by collecting all changes since the last release
      - name: Generate All Changes for Release
        if: startsWith(github.ref, 'refs/tags/')
        id: generate_release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [[ -z "$LAST_TAG" ]]; then
            echo "LAST_TAG not found; proceeding without a last tag."
            ALL_CHANGES=$(git log --pretty=format:"- %s" --no-merges)
          else
            ALL_CHANGES=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi
          echo "ALL_CHANGES<<EOF" >> $GITHUB_ENV
          echo "$ALL_CHANGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      # Step 8: Fetch timestamp of last tagged commit as ISO 8601
      - name: Fetch ISO 8601 Timestamp of Last Tag
        id: fetch_last_tag_time
        run: |
          LAST_TAG_ISO=$(git log -1 --format=%aI $(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo ""))
          echo "LAST_TAG_ISO=${LAST_TAG_ISO}" >> $GITHUB_ENV
      
      # Step 9: Fetch closed issues using GitHub API since the last tag
      - name: Fetch Closed Issues (GitHub API)
        if: startsWith(github.ref, 'refs/tags/')
        uses: octokit/request-action@v2.x
        id: fetch_closed_issues
        with:
          route: GET /repos/${{ github.repository }}/issues?state=closed&since=${{ env.LAST_TAG_ISO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 10: Process closed issues and set CLOSED_ISSUES to "No closed issues found." if none are found
      - name: Process Closed Issues
        if: startsWith(github.ref, 'refs/tags/')
        id: process_closed_issues
        run: |
          CLOSED_ISSUES=$(echo '${{ steps.fetch_closed_issues.outputs.data }}' | jq -r '.[] | select(.pull_request == null) | "- (.title) (#(.number))"')
          if [[ -z "$CLOSED_ISSUES" ]]; then
            echo "CLOSED_ISSUES=No closed issues found." >> $GITHUB_ENV   # Set to "No closed issues found."
          else
            echo "CLOSED_ISSUES<<EOF" >> $GITHUB_ENV
            echo "$CLOSED_ISSUES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      # Step 11: Generate the GitHub release with closed issues and all changes
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: "Release ${{ env.VERSION_TAG }}"
          body: |
            **Closed Issues:**
            ${{ env.CLOSED_ISSUES }}
            
            **All Changes:**
            ${{ env.ALL_CHANGES }}
          draft: false
          prerelease: false
      
      # Step 12: Log out of GHCR
      - name: Log out from GHCR
        run: docker logout ghcr.io