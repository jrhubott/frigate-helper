name: Build and Push Docker Image, Create Release with Issues and All Changes

on:
  push:
    tags:
      - 'v*'   # Trigger on version tags (e.g., v1.0.0, v2.1.0)
    branches:
      - main   # Trigger on main branch pushes

permissions:
  contents: write
  packages: write
  issues: read    # Allows reading issues for the release notes

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code with full history and tags
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history including tags

      # Step 2: Extract the version tag (for tagged releases) and commit SHA
      - name: Set version tag and commit SHA
        id: set_version_and_commit
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          else
            echo "VERSION_TAG=latest" >> $GITHUB_ENV
          fi

          # Extract the short form of the commit SHA (used for tagging)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Step 4: Build the Docker image once using the commit SHA
      - name: Build Docker image
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          docker build -t $DOCKER_IMAGE:${{ env.COMMIT_SHA }} .

      # Step 5: Push the Docker image tagged with the commit SHA
      - name: Push image with commit SHA
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          docker push $DOCKER_IMAGE:${{ env.COMMIT_SHA }}

      # Step 6: Tag the image (already built with commit SHA) with `latest` or version tag and push
      - name: Tag and Push Latest or Version
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}

          # Tag with version-specific tag if available, otherwise use 'latest'
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:${{ env.VERSION_TAG }}
            docker push $DOCKER_IMAGE:${{ env.VERSION_TAG }}

            # Additionally, tag `latest` for version builds
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:latest
            docker push $DOCKER_IMAGE:latest
          else
            docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:latest
            docker push $DOCKER_IMAGE:latest
          fi

      # Step 7: Tag missing major version (e.g., `v1` or `v2`) and push, for version tags only
      - name: Tag and Push Major Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          MAJOR_VERSION=$(echo "${{ env.VERSION_TAG }}" | grep -oE '^v[0-9]+')
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          docker tag $DOCKER_IMAGE:${{ env.COMMIT_SHA }} $DOCKER_IMAGE:${MAJOR_VERSION}
          docker push $DOCKER_IMAGE:${MAJOR_VERSION}

      # Step 8a: Generate the release notes with ALL commit messages since the last tag
      - name: Generate All Changes for Release
        if: startsWith(github.ref, 'refs/tags/')
        id: generate_release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
          ALL_CHANGES=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          echo "ALL_CHANGES<<EOF" >> $GITHUB_ENV
          echo "$ALL_CHANGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 8b: Fetch the ISO 8601 timestamp (since) of the last tag
      - name: Fetch ISO 8601 formatted timestamp of the last tag
        id: fetch_last_tag_time
        run: |
          LAST_TAG_ISO=$(git log -1 --format=%aI $(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1)))
          echo "LAST_TAG_ISO=${LAST_TAG_ISO}" >> $GITHUB_ENV

      # Step 8c: Get Closed Issues for the Release since the last ISO 8601 timestamp using Octokit Action
      - name: Fetch Closed Issues (GitHub API)
        if: startsWith(github.ref, 'refs/tags/')
        id: fetch_closed_issues
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/issues?state=closed&since=${{ env.LAST_TAG_ISO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8d: Output the raw API response for debugging
      - name: Debug Closed Issues API Response
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "###### Debugging Closed Issues API Response ######"
          echo "${{ steps.fetch_closed_issues.outputs.data }}"
          echo "################################################"

      # Step 8e: Process Closed Issues (Fix Empty Output) by ensuring that the title is available
      - name: Process Closed Issues
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Process the closed issues, ensuring that the title and number are extracted properly
          CLOSED_ISSUES=$(jq -r '.[] | select(.pull_request == null) | "- \(.title) (#\(.number))"' <<< "${{ steps.fetch_closed_issues.outputs.data }}")
          if [[ -z "$CLOSED_ISSUES" ]]; then
            echo "No closed issues found."
            echo "CLOSED_ISSUES=''" >> $GITHUB_ENV
          else
            echo "CLOSED_ISSUES<<EOF" >> $GITHUB_ENV
            echo "$CLOSED_ISSUES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      # Step 9: Create GitHub Release with Commit Messages and Closed Issues
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: "Release ${{ env.VERSION_TAG }}"
          body: |
            ${{ env.CLOSED_ISSUES && '**Closed Issues:**' }}

            ${{ env.CLOSED_ISSUES }}

            **All Changes:**
            ${{ env.ALL_CHANGES }}
          draft: false
          prerelease: false

      # Step 10: Log out from GitHub Container Registry (GHCR)
      - name: Log out from GHCR
        run: docker logout ghcr.io